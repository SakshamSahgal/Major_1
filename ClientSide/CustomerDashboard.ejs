<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Dashboard</title>
</head>

<%- include('./ReusableComponents/BootstrapCDN.ejs') %>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-success py-4">
        <div class="container-fluid">
            <h5>ORDER</h5>
        </div>
    </nav>
    <div class="container-fluid">
        <div class="row">
            <div id="dashboard-container" class="col-9 my-3 d-flex align-items-center justify-content-center">
                <svg class="my-3" width="1040" height="737">

                    <!-- Image Layer -->
                    <g id="imageLayer">
                        <title>Background Image</title>
                        <image cy="568.5" cx="173.66667" ry="213.66667" rx="45" xlink:href="/map.png" height="737" width="1040"/>
                    </g>
            
                 

                    <g id="redTrack" visibility="hidden">
                        <title>RedTrack Layer</title>
                        <image cy="568.5" cx="173.66667" ry="213.66667" rx="45" xlink:href="/Tracks/RedTrack.png" height="737" width="1040"/>
                    </g>
                    
                    <g id="blueTrack" visibility="hidden">
                        <title>BlueTrack Layer</title>
                        <image cy="568.5" cx="173.66667" ry="213.66667" rx="45" xlink:href="/Tracks/BlueTrack.png" height="737" width="1040"/>
                    </g>

                    <g id="greenTrack" visibility="hidden">
                        <title>GreenTrack Layer</title>
                        <image cy="568.5" cx="173.66667" ry="213.66667" rx="45" xlink:href="/Tracks/GreenTrack.png" height="737" width="1040"/>
                    </g>

                    <g id="yellowTrack" visibility="hidden">
                        <title>YellowTrack Layer</title>
                        <image cy="568.5" cx="173.66667" ry="213.66667" rx="45" xlink:href="/Tracks/YellowTrack.png" height="737" width="1040"/>
                    </g>

                    <g id="Truck1">
                        <title>Truck 1 Point</title>
                        <circle cx="0" cy="0" r="6" fill="red" id="Truck1Pointer" visibility="hidden" />
                    </g>
  
                    <g id="Truck2">
                        <title>Truck 2 Point</title>
                        <circle cx="0" cy="0" r="6" fill="blue" id="Truck2Pointer" visibility="hidden" />
                    </g>
  
                    <g id="Truck3">
                        <title>Truck 3 Point</title>
                        <circle cx="0" cy="0" r="6" fill="green" id="Truck3Pointer" visibility="hidden" />
                    </g>
  
                    <g id="Truck4">
                        <title>Truck 4 Point</title>
                        <circle cx="0" cy="0" r="6" fill="yellow" id="Truck4Pointer" visibility="hidden" />
                    </g>

                    <g id="ellipseLayer">
                        <title>Ellipse Layer</title>
                        <ellipse ry="8.46154" rx="8.46154" id="house1" cy="298.82956" cx="320.71376" stroke="#000" fill="#ffffff" onclick="selectHouse('house1')"/>
                        <ellipse ry="8.46154" rx="8.46154" id="house2" cy="148.27401" cx="341.82487" stroke="#000" fill="#ffffff" onclick="selectHouse('house2')" />
                        <ellipse ry="8.46154" rx="8.46154" id="house3" cy="393.82955" cx="72.38044" stroke="#000" fill="#ffffff" onclick="selectHouse('house3')" />
                        <ellipse ry="8.46154" rx="8.46154" id="house4" cy="641.05179" cx="356.26932" stroke="#000" fill="#ffffff" onclick="selectHouse('house4')" />
                        <ellipse ry="8.46154" rx="8.46154" id="house5" cy="541.05178" cx="784.04711" stroke="#000" fill="#ffffff" onclick="selectHouse('house5')" />
                        <ellipse ry="8.46154" rx="8.46154" id="house6" cy="449.94067" cx="745.15822" stroke="#000" fill="#ffffff" onclick="selectHouse('house6')" />
                        <ellipse ry="8.46154" rx="8.46154" id="house7" cy="325.49623" cx="645.15822" stroke="#000" fill="#ffffff" onclick="selectHouse('house7')" />
                        <ellipse ry="8.46154" rx="8.46154" id="house8" cy="247.71845" cx="955.15822" stroke="#000" fill="#ffffff" onclick="selectHouse('house8')" />
                    </g>

                </svg>
            </div>
            <div class="col-3">
                <!-- Bootstrap card for the vertical list -->
                <div class="card my-3">
                    <div class="card-header text-center">Place Order</div>
                    <div class="card-body text-center">
                        <span>Selected House : </span><span id="HouseSelected">No House selected</span>
                        <br>
                        <br>
                        <button class="btn btn-info" id="SelectHouse">Select House</button>                       
                    </div>
                </div>
                <div class="card my-3" id="TracksPallet" hidden>
                    <div class="card-header text-center">Tracks Through This</div>
                    
                    <div class="card-body text-center">
                        
                        <ul class="list-group" id="tracksThroughIt">
                        </ul>
                                        
                    </div>
                </div>
                <div class="card my-3" id="OrderPallet" hidden>
                    <div class="card-header text-center">Order</div>
                    <div class="card-body text-center">
                        <button class="btn btn-primary" onclick="calculateNearestTruck()">Place Order</button>              
                    </div>
                </div>
                <div class="card my-3"  id="nearestTruckPallet" hidden>
                    <div class="card-header text-center">Nearest Truck Assigned</div>
                    <div class="card-body text-center">
                        <span id="nearestTruck"> Not Yet Assigned</span>
                    </div>
                </div>
            </div>

        </div>
    </div>
    
</body>
</html>
<!-- Axios CDN -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    let selectedHouse = null;
    function selectHouse(name) {
        alert(name + " Selected!");
        

        document.getElementById("TracksPallet").hidden = true;    //Hiding the TracksPallet
        document.getElementById("OrderPallet").hidden = true;     //Hiding the Order Pallet
        document.getElementById("nearestTruckPallet").hidden = true; //Hiding the nearestTruck Pallet
        console.log(name);
        
        if(selectedHouse != null) 
            document.getElementById(selectedHouse).setAttribute("fill","#ffffff"); // Resetting the previous selected house
        
        selectedHouse = name;
        document.getElementById(selectedHouse).setAttribute("fill","red");
        document.getElementById("HouseSelected").innerHTML = name;
      }
</script>
<script>

    // This is the function that will be called when the user clicks on the select house button
    
    let selectedTrucks = []

    document.getElementById("SelectHouse").addEventListener("click", function() {

        hideTracks();
        hideTruckPointers();
        

        if(selectedHouse == null) {
            alert("Please select a house first!");
            return;
        }
        else {
            // Redirecting to the order page

            //reveal the order pallet
            document.getElementById("OrderPallet").hidden = false;
            document.getElementById("TracksPallet").hidden = false;
            
            // Getting the tracks through it from the server
           axios.get("/Tracks/" + selectedHouse).then(function(response) {
            
            let tracksThroughIt = response.data[0].tracksThroughIt;
                
                console.log(response.data);
                
                let tracksThroughItHTML =   document.getElementById("tracksThroughIt"); 
                tracksThroughItHTML.innerHTML = "";
                let tracksString = "";
                selectedTrucks = [];
                for (let i = 0; i < tracksThroughIt.length; i++) {
                    console.log(tracksThroughIt[i]);       
                    tracksString += `<li class="list-group-item">${tracksThroughIt[i]} ${getColor(tracksThroughIt[i])}  (Truck ${getTruckFromColor(tracksThroughIt[i])} )</li>`
                    document.getElementById(tracksThroughIt[i] + "Track").setAttribute("visibility","visible");
                    
                    selectedTrucks.push(getTruckFromColor(tracksThroughIt[i]))
                }

                //displaying the list of tracks through it
                tracksThroughItHTML.innerHTML = tracksString;
                //revealing the truck pointers that are on the visible tracks
                showTruckPointer(tracksThroughIt);
                console.log(selectedTrucks);

           }).catch(function(error) {
               console.log(error);
           });
        }
    });

    function getColor(track) {
        if(track == "red") return `ðŸŸ¥`;
        else if(track == "blue") return `ðŸŸ¦`;
        else if(track == "green") return `ðŸŸ©`;
        else if(track == "yellow") return `ðŸŸ¨`;
    }

    function getTruckFromColor(color){
        if(color == "red") return 1;
        else if(color == "blue") return 2;
        else if(color == "green") return 3;
        else if(color == "yellow") return 4;
    }

    function hideTracks() {
        document.getElementById("redTrack").setAttribute("visibility","hidden");
        document.getElementById("blueTrack").setAttribute("visibility","hidden");
        document.getElementById("greenTrack").setAttribute("visibility","hidden");
        document.getElementById("yellowTrack").setAttribute("visibility","hidden");
    }

    function hideTruckPointers(){
        document.getElementById("Truck1Pointer").setAttribute("visibility","hidden");
        document.getElementById("Truck2Pointer").setAttribute("visibility","hidden");
        document.getElementById("Truck3Pointer").setAttribute("visibility","hidden");
        document.getElementById("Truck4Pointer").setAttribute("visibility","hidden");
    }

    function showTruckPointer(colors){

        for (let i = 0; i < colors.length; i++) {
            if(colors[i] == "red")
                document.getElementById("Truck1Pointer").setAttribute("visibility","visible");
            else if(colors[i] == "blue")
                document.getElementById("Truck2Pointer").setAttribute("visibility","visible");
            else if(colors[i] == "green")
                document.getElementById("Truck3Pointer").setAttribute("visibility","visible");
            else if(colors[i] == "yellow")
                document.getElementById("Truck4Pointer").setAttribute("visibility","visible");
        }

        
    }


    function initializeTruckSocket(id, color, socket) {

        let truckPointer = document.getElementById(`Truck${id}Pointer`);

        socket = new WebSocket(`ws://localhost:3000/truck${id}`);
        socket.onopen = () => {
            console.log(`truck${id} WebSocket connection established.`);
        };

        socket.onmessage = (event) => {
            // console.log(`Received truck${id} data`, JSON.parse(event.data));
            // truckPointer.setAttribute("visibility", "visible");

            let truckData = JSON.parse(event.data);
            truckCoordinates[id] = {
                x : truckData.x,
                y : truckData.y
            }
            //  truckX.innerHTML = truckData.x;
            //  truckY.innerHTML = truckData.y;
            drawPoint(`Truck${id}Pointer`, truckData.x, truckData.y, color);
            console.log(truckCoordinates)
        };

        socket.onclose = () => {
            console.log(`truck${id} WebSocket connection closed.`);
            //  truckX.innerHTML = "No Data";
            //  truckY.innerHTML = "No Data";
            truckPointer.setAttribute("visibility", "hidden");
        };

    }

    /*
    1 (47, 60)
    2 (71, 60)
    3 (35, 96)
    4 (11, 60)
    5 (23, 6)
    6 (29, 12)
    7 (47, 24)
    8 (59, -18)
*/
var truckCoordinates = {
        1 : {x : 0, y : 0},
        2 : {x : 0, y : 0},
        3 : {x : 0, y : 0},
        4 : {x : 0, y : 0},
    }

    let houseCoordinates = {
        house1 : {
            x : 47,
            y : 60
        },
        house2 : {
            x : 71,
            y : 60
        },
        house3 : {
            x : 35,
            y : 96
        },
        house4 : {
            x : 11,
            y : 60
        },
        house5 : {
            x : 23,
            y : 6
        },
        house6 : {
            x : 29,
            y : 12
        },
        house7 : {
            x : 47,
            y : 24
        },
        house8 : {
            x : 59,
            y : -18
        }
    }

    var socket1; // Variable for the WebSocket connection for Truck 1
    var socket2; // Variable for the WebSocket connection for Truck 2
    var socket3; // Variable for the WebSocket connection for Truck 3
    var socket4; // Variable for the WebSocket connection for Truck 4

   

    initializeTruckSocket(1, "red", socket1);
    initializeTruckSocket(2, "blue", socket2);
    initializeTruckSocket(3, "green", socket3);
    initializeTruckSocket(4, "yellow", socket4);


    function drawPoint(id, x, y, color) {

        X = -8.25 * y + 818;
        Y = -8.1 * x + 702

        console.log("X: " + X + " Y: " + Y);
        document.getElementById(id).setAttribute("cx", X);
        document.getElementById(id).setAttribute("cy", Y);

    }

    function calculateNearestTruck(){
        document.getElementById("nearestTruckPallet").hidden = false;
        console.log(houseCoordinates[selectedHouse])
        let dist = {
            1 : Math.abs(houseCoordinates[selectedHouse].x - truckCoordinates[1].x) + Math.abs(houseCoordinates[selectedHouse].y - truckCoordinates[1].y),
            2 : Math.abs(houseCoordinates[selectedHouse].x - truckCoordinates[2].x) + Math.abs(houseCoordinates[selectedHouse].y - truckCoordinates[2].y),    
            3 : Math.abs(houseCoordinates[selectedHouse].x - truckCoordinates[3].x) + Math.abs(houseCoordinates[selectedHouse].y - truckCoordinates[3].y),
            4 : Math.abs(houseCoordinates[selectedHouse].x - truckCoordinates[4].x) + Math.abs(houseCoordinates[selectedHouse].y - truckCoordinates[4].y)
        }
        
        console.log(dist);

        let min = 100000000;

        for(let i=0;i<selectedTrucks.length;i++){
            min = Math.min(min,dist[selectedTrucks[i]]);
        }

        for(let i=0;i<selectedTrucks.length;i++){
            if(dist[selectedTrucks[i]] == min){
                document.getElementById("nearestTruck").innerHTML = "Truck " + selectedTrucks[i];
                break;
            }
        }
    }

</script>